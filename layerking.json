{
  "openapi": "3.0.1",
  "info": {
    "title": "Layer King API"
  },
  "paths": {
    "/api/account/register": {
      "post": {
        "tags": [
          "Account"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OnboardingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/app/signing": {
      "get": {
        "tags": [
          "App"
        ],
        "parameters": [
          {
            "name": "resourcePath",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SignedAsset"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedAsset"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedAsset"
                }
              }
            }
          }
        }
      }
    },
    "/api/companies": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "*ADMIN ONLY* Get all companies",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyWithUserDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyWithUserDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyWithUserDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWithUserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWithUserDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWithUserDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "notifyCompany",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "AddressLine1": {
                    "type": "string"
                  },
                  "Name": {
                    "type": "string"
                  },
                  "City": {
                    "type": "string"
                  },
                  "State": {
                    "type": "string"
                  },
                  "Country": {
                    "type": "string"
                  },
                  "Postcode": {
                    "type": "string"
                  },
                  "Phone": {
                    "type": "string"
                  },
                  "Email": {
                    "type": "string"
                  },
                  "Website": {
                    "type": "string"
                  },
                  "Logo": {
                    "type": "string"
                  },
                  "Banner": {
                    "type": "string"
                  },
                  "Bio": {
                    "type": "string"
                  },
                  "Notes": {
                    "type": "string"
                  },
                  "Status": {
                    "$ref": "#/components/schemas/CompanyStatus"
                  },
                  "OrganisationType": {
                    "$ref": "#/components/schemas/OrganisationType"
                  },
                  "IsVerified": {
                    "type": "boolean"
                  },
                  "VerifiedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "VerificationMethod": {
                    "$ref": "#/components/schemas/VerificationMethod"
                  },
                  "YearFounded": {
                    "type": "string"
                  },
                  "LookingToLicense": {
                    "type": "string"
                  },
                  "AgreementSignatory": {
                    "type": "string"
                  },
                  "AgreementDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "IsDeleted": {
                    "type": "boolean"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "AddressLine1": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "City": {
                  "style": "form"
                },
                "State": {
                  "style": "form"
                },
                "Country": {
                  "style": "form"
                },
                "Postcode": {
                  "style": "form"
                },
                "Phone": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "Website": {
                  "style": "form"
                },
                "Logo": {
                  "style": "form"
                },
                "Banner": {
                  "style": "form"
                },
                "Bio": {
                  "style": "form"
                },
                "Notes": {
                  "style": "form"
                },
                "Status": {
                  "style": "form"
                },
                "OrganisationType": {
                  "style": "form"
                },
                "IsVerified": {
                  "style": "form"
                },
                "VerifiedAt": {
                  "style": "form"
                },
                "VerificationMethod": {
                  "style": "form"
                },
                "YearFounded": {
                  "style": "form"
                },
                "LookingToLicense": {
                  "style": "form"
                },
                "AgreementSignatory": {
                  "style": "form"
                },
                "AgreementDate": {
                  "style": "form"
                },
                "IsDeleted": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company": {
      "post": {
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "name": "notifyCompany",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/media": {
      "post": {
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "Logo": {
                    "type": "string",
                    "format": "binary"
                  },
                  "LogoUrl": {
                    "type": "string"
                  },
                  "LogoFileType": {
                    "type": "string"
                  },
                  "Banner": {
                    "type": "string",
                    "format": "binary"
                  },
                  "BannerUrl": {
                    "type": "string"
                  },
                  "BannerFileType": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "Logo": {
                  "style": "form"
                },
                "LogoUrl": {
                  "style": "form"
                },
                "LogoFileType": {
                  "style": "form"
                },
                "Banner": {
                  "style": "form"
                },
                "BannerUrl": {
                  "style": "form"
                },
                "BannerFileType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/users/{userId}": {
      "delete": {
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/conversation/{id}": {
      "get": {
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/conversation/{id}/participant/{participantId}": {
      "get": {
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Conversation"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/enum/age_rating_categories": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/age_rating_classifications": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/age_rating_classifications/{categoryId}": {
      "get": {
        "tags": [
          "Enum"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/monetisation_types": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/game_data_source": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/release_status": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/company_status": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/organisation_types": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/user_status": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/country_categories": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/marketing_capabilities": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/content_restrictions": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/objective_types": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/collaboration_types": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/budget_range": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/royalty_rates": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/relationship_type": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/ip_status": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/social_channels": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/genders": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/licence_fees": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/minimum_guarantees": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/match_status": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/match_types": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/not_match_reasons": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/target_collaboration_type": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/commercial_structure": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/proposal_status": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/deal_memo_status": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/proposal_search_order_type": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/age_segments": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/asset_media_types": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/media_types": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/territory_restriction": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/exclusivity": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/platform_types": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/platform_families": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/gender_split": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/enum/search_order_type": {
      "get": {
        "tags": [
          "Enum"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnumResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/company/{companyId}/games": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/games/paged": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDtoPagingResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDtoPagingResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDtoPagingResult"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/game/{gameId}": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fetch",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/game/{gameId}/intel": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameIntelDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameIntelDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameIntelDto"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GameIntelDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameIntelDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GameIntelDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GameIntelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameIntelDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameIntelDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameIntelDto"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/game/external/{dataSource}/{externalId}": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "dataSource",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GameDataSource"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetGameResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGameResponse"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/game/external": {
      "post": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AddGameExternalRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddGameExternalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddGameExternalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddGameExternalRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/game/external/search": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchGameResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchGameResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchGameResponse"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/game": {
      "post": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GameDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/game/{gameId}/award": {
      "post": {
        "tags": [
          "GameAward"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GameAwardDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameAwardDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GameAwardDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GameAwardDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/game/{gameId}/awards": {
      "get": {
        "tags": [
          "GameAward"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/game/{gameId}/award/{id}": {
      "patch": {
        "tags": [
          "GameAward"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GameAwardDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameAwardDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GameAwardDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GameAwardDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "GameAward"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/game/{gameId}/media": {
      "post": {
        "tags": [
          "GameMedia"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "GameId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  },
                  "Url": {
                    "type": "string"
                  },
                  "FileName": {
                    "type": "string"
                  },
                  "FileType": {
                    "type": "string"
                  },
                  "FileSize": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Type": {
                    "$ref": "#/components/schemas/AssetMediaType"
                  },
                  "MediaType": {
                    "$ref": "#/components/schemas/MediaType"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "GameId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "Url": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                },
                "FileType": {
                  "style": "form"
                },
                "FileSize": {
                  "style": "form"
                },
                "Type": {
                  "style": "form"
                },
                "MediaType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "GameMedia"
        ],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/game/{gameId}/media/{id}": {
      "patch": {
        "tags": [
          "GameMedia"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "GameId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  },
                  "Url": {
                    "type": "string"
                  },
                  "FileName": {
                    "type": "string"
                  },
                  "FileType": {
                    "type": "string"
                  },
                  "FileSize": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Type": {
                    "$ref": "#/components/schemas/AssetMediaType"
                  },
                  "MediaType": {
                    "$ref": "#/components/schemas/MediaType"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "GameId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "Url": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                },
                "FileType": {
                  "style": "form"
                },
                "FileSize": {
                  "style": "form"
                },
                "Type": {
                  "style": "form"
                },
                "MediaType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "GameMedia"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/game/{gameId}/media/{id}/download": {
      "get": {
        "tags": [
          "GameMedia"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/games": {
      "get": {
        "tags": [
          "Games"
        ],
        "summary": "*ADMIN ONLY* Get all games",
        "parameters": [
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/games/paged": {
      "get": {
        "tags": [
          "Games"
        ],
        "parameters": [
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDtoPagingResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDtoPagingResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDtoPagingResult"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/ips": {
      "get": {
        "tags": [
          "IP"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/ips/paged": {
      "get": {
        "tags": [
          "IP"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/ip/{ipId}": {
      "get": {
        "tags": [
          "IP"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "IP"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IPDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IPDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IPDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "IP"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/ip": {
      "post": {
        "tags": [
          "IP"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IPDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IPDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IPDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/ip/{ipId}/showcase": {
      "patch": {
        "tags": [
          "IP"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "boolean"
              }
            },
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            },
            "text/json": {
              "schema": {
                "type": "boolean"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/audience": {
      "post": {
        "tags": [
          "IPAudience"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPAudience"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPAudience"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPAudience"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "IPAudience"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPAudience"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPAudience"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPAudience"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/award": {
      "post": {
        "tags": [
          "IPAward"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IPAwardDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPAwardDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IPAwardDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IPAwardDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/awards": {
      "get": {
        "tags": [
          "IPAward"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/award/{id}": {
      "patch": {
        "tags": [
          "IPAward"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IPAwardDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPAwardDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IPAwardDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IPAwardDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "IPAward"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/award/{id}/hard": {
      "delete": {
        "tags": [
          "IPAward"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/collaboration": {
      "post": {
        "tags": [
          "IPCollaboration"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IPCollaborationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPCollaborationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IPCollaborationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IPCollaborationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/collaborations": {
      "get": {
        "tags": [
          "IPCollaboration"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/collaboration/{id}": {
      "patch": {
        "tags": [
          "IPCollaboration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IPCollaborationDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IPCollaborationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IPCollaborationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IPCollaborationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "IPCollaboration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/collaboration/{id}/hard": {
      "delete": {
        "tags": [
          "IPCollaboration"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ipcollaborations": {
      "get": {
        "tags": [
          "IPCollaborations"
        ],
        "summary": "*ADMIN ONLY* Get all IP collaborations",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCollaborationDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCollaborationDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCollaborationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/media": {
      "post": {
        "tags": [
          "IPMedia"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "IPId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  },
                  "Url": {
                    "type": "string"
                  },
                  "FileName": {
                    "type": "string"
                  },
                  "FileType": {
                    "type": "string"
                  },
                  "FileSize": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Type": {
                    "$ref": "#/components/schemas/AssetMediaType"
                  },
                  "MediaType": {
                    "$ref": "#/components/schemas/MediaType"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "IPId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "Url": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                },
                "FileType": {
                  "style": "form"
                },
                "FileSize": {
                  "style": "form"
                },
                "Type": {
                  "style": "form"
                },
                "MediaType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "IPMedia"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/media/{id}": {
      "patch": {
        "tags": [
          "IPMedia"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "IPId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  },
                  "Url": {
                    "type": "string"
                  },
                  "FileName": {
                    "type": "string"
                  },
                  "FileType": {
                    "type": "string"
                  },
                  "FileSize": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Type": {
                    "$ref": "#/components/schemas/AssetMediaType"
                  },
                  "MediaType": {
                    "$ref": "#/components/schemas/MediaType"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "IPId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "Url": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                },
                "FileType": {
                  "style": "form"
                },
                "FileSize": {
                  "style": "form"
                },
                "Type": {
                  "style": "form"
                },
                "MediaType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "IPMedia"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ip/{ipId}/media/{id}/download": {
      "get": {
        "tags": [
          "IPMedia"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ips": {
      "get": {
        "tags": [
          "IPs"
        ],
        "summary": "*ADMIN ONLY* Get all IP",
        "parameters": [
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ips/paged": {
      "get": {
        "tags": [
          "IPs"
        ],
        "parameters": [
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPDtoPagingResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPDtoPagingResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPDtoPagingResult"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/matches": {
      "get": {
        "tags": [
          "Match"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/matches/paged": {
      "get": {
        "tags": [
          "Match"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDtoPagingResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDtoPagingResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDtoPagingResult"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/match/{id}": {
      "get": {
        "tags": [
          "Match"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Match"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Match"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/match": {
      "post": {
        "tags": [
          "Match"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/match/{id}/hard": {
      "delete": {
        "tags": [
          "Match"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/matches": {
      "get": {
        "tags": [
          "Matches"
        ],
        "summary": "*ADMIN ONLY* Get all matches",
        "parameters": [
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllMatchResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllMatchResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllMatchResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/matches/paged": {
      "get": {
        "tags": [
          "Matches"
        ],
        "parameters": [
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllMatchResponsePagingResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllMatchResponsePagingResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllMatchResponsePagingResult"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/matches/company/{companyId}": {
      "get": {
        "tags": [
          "Matches"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllMatchResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllMatchResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllMatchResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/matching/{companyId}/trigger": {
      "get": {
        "tags": [
          "Matching"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/matching/{companyId}": {
      "post": {
        "tags": [
          "Matching"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isInstantMatch",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/matching/{companyId}/debug/{ipId}": {
      "post": {
        "tags": [
          "Matching"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isInstantMatch",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/matching/{companyId}/instant": {
      "post": {
        "tags": [
          "Matching"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/matching_preferences": {
      "get": {
        "tags": [
          "MatchingPreference"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchingPreferenceDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchingPreferenceDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchingPreferenceDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/matching_preferences/paged": {
      "get": {
        "tags": [
          "MatchingPreference"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDtoPagingResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDtoPagingResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDtoPagingResult"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/matching_preference/{id}": {
      "get": {
        "tags": [
          "MatchingPreference"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDto"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "MatchingPreference"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "MatchingPreference"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/matching_preference": {
      "post": {
        "tags": [
          "MatchingPreference"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingPreferenceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingPreferenceDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/company/{companyId}/matching_preference/{id}/hard": {
      "delete": {
        "tags": [
          "MatchingPreference"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/matchingpreferences": {
      "get": {
        "tags": [
          "MatchingPreferences"
        ],
        "summary": "*ADMIN ONLY* Get all matching preferences",
        "parameters": [
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllMatchingPreferenceResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllMatchingPreferenceResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllMatchingPreferenceResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/matchingpreferences/paged": {
      "get": {
        "tags": [
          "MatchingPreferences"
        ],
        "parameters": [
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SearchOrderType"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllMatchingPreferenceResponsePagingResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllMatchingPreferenceResponsePagingResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllMatchingPreferenceResponsePagingResult"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}": {
      "get": {
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProposalRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProposalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProposalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProposalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/match/{matchId}": {
      "get": {
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "matchId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/company/{companyId}": {
      "get": {
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ProposalSearchOrderType"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/company/{companyId}/paged": {
      "get": {
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ProposalSearchOrderType"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDtoPagingResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDtoPagingResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDtoPagingResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal": {
      "post": {
        "tags": [
          "Proposal"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProposalRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProposalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProposalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProposalRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/hard": {
      "delete": {
        "tags": [
          "Proposal"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/deal_memo": {
      "post": {
        "tags": [
          "ProposalDealMemo"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "ProposalId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  },
                  "Url": {
                    "type": "string"
                  },
                  "Status": {
                    "$ref": "#/components/schemas/DealMemoStatus"
                  },
                  "DealMemoUrl": {
                    "type": "string"
                  },
                  "IPHolderUserId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "IPHolderUser.Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "IPHolderUser.FirstName": {
                    "type": "string"
                  },
                  "IPHolderUser.LastName": {
                    "type": "string"
                  },
                  "IPHolderUser.Email": {
                    "type": "string"
                  },
                  "IPHolderUser.Phone": {
                    "type": "string"
                  },
                  "IPHolderUser.JobTitle": {
                    "type": "string"
                  },
                  "IPHolderUser.Status": {
                    "$ref": "#/components/schemas/UserStatus"
                  },
                  "IPHolderUser.IsPrimaryContact": {
                    "type": "boolean"
                  },
                  "IPHolderUser.IsDeleted": {
                    "type": "boolean"
                  },
                  "IPHolderUser.CreatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "IPHolderUser.LastSeen": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "DeveloperUserId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "DeveloperUser.Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "DeveloperUser.FirstName": {
                    "type": "string"
                  },
                  "DeveloperUser.LastName": {
                    "type": "string"
                  },
                  "DeveloperUser.Email": {
                    "type": "string"
                  },
                  "DeveloperUser.Phone": {
                    "type": "string"
                  },
                  "DeveloperUser.JobTitle": {
                    "type": "string"
                  },
                  "DeveloperUser.Status": {
                    "$ref": "#/components/schemas/UserStatus"
                  },
                  "DeveloperUser.IsPrimaryContact": {
                    "type": "boolean"
                  },
                  "DeveloperUser.IsDeleted": {
                    "type": "boolean"
                  },
                  "DeveloperUser.CreatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "DeveloperUser.LastSeen": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "Generated": {
                    "type": "boolean"
                  },
                  "FileSize": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "ProposalId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "Url": {
                  "style": "form"
                },
                "Status": {
                  "style": "form"
                },
                "DealMemoUrl": {
                  "style": "form"
                },
                "IPHolderUserId": {
                  "style": "form"
                },
                "IPHolderUser.Id": {
                  "style": "form"
                },
                "IPHolderUser.FirstName": {
                  "style": "form"
                },
                "IPHolderUser.LastName": {
                  "style": "form"
                },
                "IPHolderUser.Email": {
                  "style": "form"
                },
                "IPHolderUser.Phone": {
                  "style": "form"
                },
                "IPHolderUser.JobTitle": {
                  "style": "form"
                },
                "IPHolderUser.Status": {
                  "style": "form"
                },
                "IPHolderUser.IsPrimaryContact": {
                  "style": "form"
                },
                "IPHolderUser.IsDeleted": {
                  "style": "form"
                },
                "IPHolderUser.CreatedAt": {
                  "style": "form"
                },
                "IPHolderUser.LastSeen": {
                  "style": "form"
                },
                "DeveloperUserId": {
                  "style": "form"
                },
                "DeveloperUser.Id": {
                  "style": "form"
                },
                "DeveloperUser.FirstName": {
                  "style": "form"
                },
                "DeveloperUser.LastName": {
                  "style": "form"
                },
                "DeveloperUser.Email": {
                  "style": "form"
                },
                "DeveloperUser.Phone": {
                  "style": "form"
                },
                "DeveloperUser.JobTitle": {
                  "style": "form"
                },
                "DeveloperUser.Status": {
                  "style": "form"
                },
                "DeveloperUser.IsPrimaryContact": {
                  "style": "form"
                },
                "DeveloperUser.IsDeleted": {
                  "style": "form"
                },
                "DeveloperUser.CreatedAt": {
                  "style": "form"
                },
                "DeveloperUser.LastSeen": {
                  "style": "form"
                },
                "Generated": {
                  "style": "form"
                },
                "FileSize": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "ProposalDealMemo"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/deal_memo/{id}": {
      "patch": {
        "tags": [
          "ProposalDealMemo"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "ProposalId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  },
                  "Url": {
                    "type": "string"
                  },
                  "Status": {
                    "$ref": "#/components/schemas/DealMemoStatus"
                  },
                  "DealMemoUrl": {
                    "type": "string"
                  },
                  "IPHolderUserId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "IPHolderUser.Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "IPHolderUser.FirstName": {
                    "type": "string"
                  },
                  "IPHolderUser.LastName": {
                    "type": "string"
                  },
                  "IPHolderUser.Email": {
                    "type": "string"
                  },
                  "IPHolderUser.Phone": {
                    "type": "string"
                  },
                  "IPHolderUser.JobTitle": {
                    "type": "string"
                  },
                  "IPHolderUser.Status": {
                    "$ref": "#/components/schemas/UserStatus"
                  },
                  "IPHolderUser.IsPrimaryContact": {
                    "type": "boolean"
                  },
                  "IPHolderUser.IsDeleted": {
                    "type": "boolean"
                  },
                  "IPHolderUser.CreatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "IPHolderUser.LastSeen": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "DeveloperUserId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "DeveloperUser.Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "DeveloperUser.FirstName": {
                    "type": "string"
                  },
                  "DeveloperUser.LastName": {
                    "type": "string"
                  },
                  "DeveloperUser.Email": {
                    "type": "string"
                  },
                  "DeveloperUser.Phone": {
                    "type": "string"
                  },
                  "DeveloperUser.JobTitle": {
                    "type": "string"
                  },
                  "DeveloperUser.Status": {
                    "$ref": "#/components/schemas/UserStatus"
                  },
                  "DeveloperUser.IsPrimaryContact": {
                    "type": "boolean"
                  },
                  "DeveloperUser.IsDeleted": {
                    "type": "boolean"
                  },
                  "DeveloperUser.CreatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "DeveloperUser.LastSeen": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "Generated": {
                    "type": "boolean"
                  },
                  "FileSize": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "ProposalId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "Url": {
                  "style": "form"
                },
                "Status": {
                  "style": "form"
                },
                "DealMemoUrl": {
                  "style": "form"
                },
                "IPHolderUserId": {
                  "style": "form"
                },
                "IPHolderUser.Id": {
                  "style": "form"
                },
                "IPHolderUser.FirstName": {
                  "style": "form"
                },
                "IPHolderUser.LastName": {
                  "style": "form"
                },
                "IPHolderUser.Email": {
                  "style": "form"
                },
                "IPHolderUser.Phone": {
                  "style": "form"
                },
                "IPHolderUser.JobTitle": {
                  "style": "form"
                },
                "IPHolderUser.Status": {
                  "style": "form"
                },
                "IPHolderUser.IsPrimaryContact": {
                  "style": "form"
                },
                "IPHolderUser.IsDeleted": {
                  "style": "form"
                },
                "IPHolderUser.CreatedAt": {
                  "style": "form"
                },
                "IPHolderUser.LastSeen": {
                  "style": "form"
                },
                "DeveloperUserId": {
                  "style": "form"
                },
                "DeveloperUser.Id": {
                  "style": "form"
                },
                "DeveloperUser.FirstName": {
                  "style": "form"
                },
                "DeveloperUser.LastName": {
                  "style": "form"
                },
                "DeveloperUser.Email": {
                  "style": "form"
                },
                "DeveloperUser.Phone": {
                  "style": "form"
                },
                "DeveloperUser.JobTitle": {
                  "style": "form"
                },
                "DeveloperUser.Status": {
                  "style": "form"
                },
                "DeveloperUser.IsPrimaryContact": {
                  "style": "form"
                },
                "DeveloperUser.IsDeleted": {
                  "style": "form"
                },
                "DeveloperUser.CreatedAt": {
                  "style": "form"
                },
                "DeveloperUser.LastSeen": {
                  "style": "form"
                },
                "Generated": {
                  "style": "form"
                },
                "FileSize": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ProposalDealMemo"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalDealMemoDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/deal_memo/{id}/hard": {
      "delete": {
        "tags": [
          "ProposalDealMemo"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/game/{gameId}": {
      "get": {
        "tags": [
          "ProposalDetail"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/ip/{ipId}": {
      "get": {
        "tags": [
          "ProposalDetail"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IPDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/media": {
      "post": {
        "tags": [
          "ProposalMedia"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "ProposalId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  },
                  "Url": {
                    "type": "string"
                  },
                  "FileName": {
                    "type": "string"
                  },
                  "FileType": {
                    "type": "string"
                  },
                  "FileSize": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Type": {
                    "$ref": "#/components/schemas/AssetMediaType"
                  },
                  "MediaType": {
                    "$ref": "#/components/schemas/MediaType"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "ProposalId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "Url": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                },
                "FileType": {
                  "style": "form"
                },
                "FileSize": {
                  "style": "form"
                },
                "Type": {
                  "style": "form"
                },
                "MediaType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "ProposalMedia"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalMediaDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalMediaDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProposalMediaDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/media/{mediaId}": {
      "patch": {
        "tags": [
          "ProposalMedia"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mediaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "ProposalId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "File": {
                    "type": "string",
                    "format": "binary"
                  },
                  "Url": {
                    "type": "string"
                  },
                  "FileName": {
                    "type": "string"
                  },
                  "FileType": {
                    "type": "string"
                  },
                  "FileSize": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Type": {
                    "$ref": "#/components/schemas/AssetMediaType"
                  },
                  "MediaType": {
                    "$ref": "#/components/schemas/MediaType"
                  }
                }
              },
              "encoding": {
                "Id": {
                  "style": "form"
                },
                "ProposalId": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                },
                "Url": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                },
                "FileType": {
                  "style": "form"
                },
                "FileSize": {
                  "style": "form"
                },
                "Type": {
                  "style": "form"
                },
                "MediaType": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalMediaDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalMediaDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalMediaDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ProposalMedia"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mediaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalMediaDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalMediaDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalMediaDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/media/{mediaId}/hard": {
      "delete": {
        "tags": [
          "ProposalMedia"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mediaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposal/{proposalId}/media/{mediaId}/download": {
      "get": {
        "tags": [
          "ProposalMedia"
        ],
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mediaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposals": {
      "get": {
        "tags": [
          "Proposals"
        ],
        "summary": "*ADMIN ONLY* Get all proposals",
        "parameters": [
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ProposalSearchOrderType"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllProposalResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllProposalResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAllProposalResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/proposals/paged": {
      "get": {
        "tags": [
          "Proposals"
        ],
        "parameters": [
          {
            "name": "OrderType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ProposalSearchOrderType"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllProposalResponsePagingResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllProposalResponsePagingResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllProposalResponsePagingResult"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/reference/game_category_genres": {
      "get": {
        "tags": [
          "Reference"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameCategoryGenre"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameCategoryGenre"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameCategoryGenre"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/game_categories": {
      "get": {
        "tags": [
          "Reference"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameCategory"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameCategory"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameCategory"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/game_genres": {
      "get": {
        "tags": [
          "Reference"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameGenre"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameGenre"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameGenre"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/game_genres/categories": {
      "get": {
        "tags": [
          "Reference"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameCategoryGenre"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameCategoryGenre"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GameCategoryGenre"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/platforms": {
      "get": {
        "tags": [
          "Reference"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Platform"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Platform"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Platform"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/themes": {
      "get": {
        "tags": [
          "Reference"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Theme"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Theme"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Theme"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/themes/categories": {
      "get": {
        "tags": [
          "Reference"
        ],
        "parameters": [
          {
            "name": "names",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Theme"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Theme"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Theme"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/theme_categories": {
      "get": {
        "tags": [
          "Reference"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/distribution_channels": {
      "get": {
        "tags": [
          "Reference"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DistributionChannel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DistributionChannel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DistributionChannel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/ip_categories": {
      "get": {
        "tags": [
          "Reference"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCategory"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCategory"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCategory"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/ip_genres": {
      "get": {
        "tags": [
          "Reference"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPGenre"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPGenre"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPGenre"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/ip_category_genres": {
      "get": {
        "tags": [
          "Reference"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCategoryGenreDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCategoryGenreDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCategoryGenreDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/ip_genres/categories": {
      "get": {
        "tags": [
          "Reference"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCategoryGenreDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCategoryGenreDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IPCategoryGenreDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/licensor_materials": {
      "get": {
        "tags": [
          "Reference"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicensorMaterial"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicensorMaterial"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicensorMaterial"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reference/countries": {
      "get": {
        "tags": [
          "Reference"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CountryCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/sync/hype_auditor/{ipId}": {
      "post": {
        "tags": [
          "Sync"
        ],
        "parameters": [
          {
            "name": "ipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/sync/hype_auditor": {
      "post": {
        "tags": [
          "Sync"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/user/me": {
      "get": {
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/user/check": {
      "get": {
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/user/forceidentify": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "This endpoint is admin only, temporary, and will be deprecated shortly following release.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/user/company/{companyId}": {
      "post": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/user/company/{companyId}/resend-invitation/{userId}": {
      "post": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/user/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeCompany",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithCompanyDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithCompanyDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithCompanyDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "patch": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "*ADMIN ONLY* Get all users",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Authorization header not present, has no value or no valid jwt bearer token"
          },
          "403": {
            "description": "If user not authorized to perform requested action"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddGameExternalRequest": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "dataSource": {
            "$ref": "#/components/schemas/GameDataSource"
          }
        },
        "additionalProperties": false
      },
      "AgeRating": {
        "type": "object",
        "properties": {
          "classification": {
            "$ref": "#/components/schemas/AgeRatingClassification"
          },
          "descriptor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AgeRatingClassification": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47
        ],
        "type": "integer",
        "format": "int32"
      },
      "AgeSegment": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "AssetMediaType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ],
        "type": "integer",
        "format": "int32"
      },
      "BudgetRange": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "ChannelEngagement": {
        "type": "object",
        "properties": {
          "followersCount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "followersDelta": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "avgLikes": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "avgComments": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollaborationType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "CommercialStructure": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "Company": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "maxLength": -1,
            "type": "string",
            "nullable": true
          },
          "notes": {
            "maxLength": -1,
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/CompanyStatus"
          },
          "statusLastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "organisationType": {
            "$ref": "#/components/schemas/OrganisationType"
          },
          "isVerified": {
            "type": "boolean"
          },
          "verifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "verificationMethod": {
            "$ref": "#/components/schemas/VerificationMethod"
          },
          "yearFounded": {
            "type": "string",
            "nullable": true
          },
          "lookingToLicense": {
            "maxLength": -1,
            "type": "string",
            "nullable": true
          },
          "agreementSignatory": {
            "type": "string",
            "nullable": true
          },
          "agreementDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true
          },
          "games": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Game"
            },
            "nullable": true
          },
          "iPs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IP"
            },
            "nullable": true
          },
          "matchingPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchingPreference"
            },
            "nullable": true
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Match"
            },
            "nullable": true
          },
          "internalContactUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "airtableCompanyId": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/CompanyStatus"
          },
          "organisationType": {
            "$ref": "#/components/schemas/OrganisationType"
          },
          "isVerified": {
            "type": "boolean",
            "nullable": true
          },
          "verifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "verificationMethod": {
            "$ref": "#/components/schemas/VerificationMethod"
          },
          "yearFounded": {
            "type": "string",
            "nullable": true
          },
          "lookingToLicense": {
            "type": "string",
            "nullable": true
          },
          "agreementSignatory": {
            "type": "string",
            "nullable": true
          },
          "agreementDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyStatus": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "CompanyWithUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "postcode": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/CompanyStatus"
          },
          "organisationType": {
            "$ref": "#/components/schemas/OrganisationType"
          },
          "isVerified": {
            "type": "boolean",
            "nullable": true
          },
          "verifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "verificationMethod": {
            "$ref": "#/components/schemas/VerificationMethod"
          },
          "yearFounded": {
            "type": "string",
            "nullable": true
          },
          "lookingToLicense": {
            "type": "string",
            "nullable": true
          },
          "agreementSignatory": {
            "type": "string",
            "nullable": true
          },
          "agreementDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentRestriction": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "ContentRestrictions": {
        "type": "object",
        "properties": {
          "restrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentRestriction"
            },
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CountryCategory": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "format": "int32"
      },
      "CountryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "integer",
            "format": "int32"
          },
          "culturalCode": {
            "type": "string",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "continent": {
            "type": "string",
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryCategory"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CountryIntel": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string",
            "nullable": true
          },
          "countryPercentage": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateProposalRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "gameId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "game": {
            "$ref": "#/components/schemas/GameDto"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ProposalStatus"
          },
          "previousStatus": {
            "$ref": "#/components/schemas/ProposalStatus"
          },
          "dealMemoStatus": {
            "$ref": "#/components/schemas/DealMemoStatus"
          },
          "ipId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ip": {
            "$ref": "#/components/schemas/IPDto"
          },
          "matchId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "match": {
            "$ref": "#/components/schemas/MatchDto"
          },
          "collaborationType": {
            "$ref": "#/components/schemas/CollaborationType"
          },
          "declineReasonDetail": {
            "type": "string",
            "nullable": true
          },
          "targetCollaborationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetCollaborationType"
            },
            "nullable": true
          },
          "ipUsageInGame": {
            "type": "string",
            "nullable": true
          },
          "gameArtStyle": {
            "type": "string",
            "nullable": true
          },
          "ipMonetisationDetail": {
            "type": "string",
            "nullable": true
          },
          "commercialStructure": {
            "$ref": "#/components/schemas/CommercialStructure"
          },
          "minimumGuarantee": {
            "type": "string",
            "nullable": true
          },
          "royaltyAdvance": {
            "type": "string",
            "nullable": true
          },
          "royaltyAdvanceDetail": {
            "type": "string",
            "nullable": true
          },
          "royaltyRate": {
            "type": "string",
            "nullable": true
          },
          "royaltyApplyTo": {
            "type": "string",
            "nullable": true
          },
          "flatRateLicenseFee": {
            "type": "string",
            "nullable": true
          },
          "flatRateAdvance": {
            "type": "string",
            "nullable": true
          },
          "flatRateDetail": {
            "type": "string",
            "nullable": true
          },
          "revenueShareRoyaltyRate": {
            "type": "string",
            "nullable": true
          },
          "revenueShareRoyaltyApplyTo": {
            "type": "string",
            "nullable": true
          },
          "baseRevenueForecast": {
            "type": "string",
            "nullable": true
          },
          "bestRevenueForecast": {
            "type": "string",
            "nullable": true
          },
          "worstRevenueForecast": {
            "type": "string",
            "nullable": true
          },
          "revenueForecastDetail": {
            "type": "string",
            "nullable": true
          },
          "term": {
            "type": "string",
            "nullable": true
          },
          "productionTime": {
            "type": "string",
            "nullable": true
          },
          "estimatedLaunchDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "territoryRestriction": {
            "$ref": "#/components/schemas/TerritoryRestriction"
          },
          "exclusivity": {
            "$ref": "#/components/schemas/Exclusivity"
          },
          "additionalDeveloperDetail": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "monetisationMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonetisationType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DealMemoStatus": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "DistributionChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "websiteUrl": {
            "type": "string",
            "nullable": true
          },
          "platformIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnumResponse": {
        "type": "object",
        "properties": {
          "key": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Exclusivity": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "FlatFee": {
        "type": "object",
        "properties": {
          "licenseFee": {
            "$ref": "#/components/schemas/LicenseFee"
          },
          "advance": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Game": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "releaseStatus": {
            "$ref": "#/components/schemas/ReleaseStatus"
          },
          "gameCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "gameGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "gameCategoryGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "themeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "appStoreLink": {
            "type": "string",
            "nullable": true
          },
          "googlePlayLink": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": -1,
            "type": "string",
            "nullable": true
          },
          "keywords": {
            "maxLength": -1,
            "type": "string",
            "nullable": true
          },
          "isBlockchain": {
            "type": "boolean",
            "nullable": true
          },
          "iosReviewRating": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "googlePlayReviewRating": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "steamReviewRating": {
            "type": "number",
            "format": "double",
            "nullable": true,
            "deprecated": true
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "monetizationMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonetisationType"
            },
            "nullable": true
          },
          "monetisationMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonetisationType"
            },
            "nullable": true
          },
          "platformReleases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatFormRelease"
            },
            "nullable": true
          },
          "ageRatings": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AgeRating"
            },
            "nullable": true
          },
          "gameMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameMedia"
            },
            "nullable": true
          },
          "gameIntel": {
            "$ref": "#/components/schemas/GameIntel"
          },
          "gameAwards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameAward"
            },
            "nullable": true
          },
          "isCompanyDeveloper": {
            "type": "boolean",
            "nullable": true
          },
          "isCompanyPublisher": {
            "type": "boolean",
            "nullable": true
          },
          "additionalCreditDeveloper": {
            "type": "string",
            "nullable": true
          },
          "additionalCreditPublisher": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "airtableGameId": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameAward": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "gameId": {
            "type": "string",
            "format": "uuid"
          },
          "game": {
            "$ref": "#/components/schemas/Game"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "result": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "string",
            "nullable": true
          },
          "awardShow": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameAwardDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "gameId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "result": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "string",
            "nullable": true
          },
          "awardShow": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameCategoryGenre": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "category": {
            "$ref": "#/components/schemas/GameCategory"
          },
          "genreId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "genre": {
            "$ref": "#/components/schemas/GameGenre"
          },
          "description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameDataSource": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "GameDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/CompanyDto"
          },
          "releaseStatus": {
            "$ref": "#/components/schemas/ReleaseStatus"
          },
          "gameCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "gameGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "gameCategoryGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "themeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "appStoreLink": {
            "type": "string",
            "nullable": true
          },
          "googlePlayLink": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isBlockchain": {
            "type": "boolean",
            "nullable": true
          },
          "iosReviewRating": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "googlePlayReviewRating": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "steamReviewRating": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "monetizationMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonetisationType"
            },
            "nullable": true
          },
          "platformReleases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlatFormRelease"
            },
            "nullable": true
          },
          "ageRatings": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AgeRating"
            },
            "nullable": true
          },
          "gameMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameMediaDto"
            },
            "nullable": true
          },
          "gameIntel": {
            "$ref": "#/components/schemas/GameIntelDto"
          },
          "gameAwards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameAwardDto"
            },
            "nullable": true
          },
          "isCompanyDeveloper": {
            "type": "boolean",
            "nullable": true
          },
          "isCompanyPublisher": {
            "type": "boolean",
            "nullable": true
          },
          "additionalCreditDeveloper": {
            "type": "string",
            "nullable": true
          },
          "additionalCreditPublisher": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "primaryContact": {
            "$ref": "#/components/schemas/UserDto"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameDtoPagingResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameDto"
            },
            "nullable": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalRecords": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "GameGenre": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameIntel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "game": {
            "$ref": "#/components/schemas/Game"
          },
          "appStoreId": {
            "type": "string",
            "nullable": true
          },
          "googlePlayId": {
            "type": "string",
            "nullable": true
          },
          "igdbId": {
            "type": "string",
            "nullable": true
          },
          "steamAppId": {
            "type": "string",
            "nullable": true
          },
          "genderSplit": {
            "$ref": "#/components/schemas/GenderSplit"
          },
          "topCountries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryIntel"
            },
            "nullable": true
          },
          "ageSegments": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "dauLastMonth": {
            "$ref": "#/components/schemas/UserIntel"
          },
          "mauLastMonth": {
            "$ref": "#/components/schemas/UserIntel"
          },
          "totalDownloads": {
            "$ref": "#/components/schemas/UserIntel"
          },
          "downloadsLastMonth": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "averageRating": {
            "$ref": "#/components/schemas/RatingIntel"
          },
          "iosRating": {
            "$ref": "#/components/schemas/RatingIntel"
          },
          "googlePlayRating": {
            "$ref": "#/components/schemas/RatingIntel"
          },
          "iosAdvisories": {
            "type": "string",
            "nullable": true
          },
          "analysisLastUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameIntelDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "appStoreId": {
            "type": "string",
            "nullable": true
          },
          "googlePlayId": {
            "type": "string",
            "nullable": true
          },
          "igdbId": {
            "type": "string",
            "nullable": true
          },
          "steamAppId": {
            "type": "string",
            "nullable": true
          },
          "genderSplit": {
            "$ref": "#/components/schemas/GenderSplit"
          },
          "topCountries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryIntel"
            },
            "nullable": true
          },
          "ageSegments": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "dauLastMonth": {
            "$ref": "#/components/schemas/UserIntel"
          },
          "mauLastMonth": {
            "$ref": "#/components/schemas/UserIntel"
          },
          "totalDownloads": {
            "$ref": "#/components/schemas/UserIntel"
          },
          "averageRating": {
            "$ref": "#/components/schemas/RatingIntel"
          },
          "iosRating": {
            "$ref": "#/components/schemas/RatingIntel"
          },
          "googlePlayRating": {
            "$ref": "#/components/schemas/RatingIntel"
          },
          "iosAdvisories": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameMedia": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "gameId": {
            "type": "string",
            "format": "uuid"
          },
          "game": {
            "$ref": "#/components/schemas/Game"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AssetMediaType"
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "airtableAttachmentId": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GameMediaDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "gameId": {
            "type": "string",
            "format": "uuid"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AssetMediaType"
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          }
        },
        "additionalProperties": false
      },
      "GenderBreakdown": {
        "type": "object",
        "properties": {
          "age13To17": {
            "type": "number",
            "format": "double"
          },
          "age18To24": {
            "type": "number",
            "format": "double"
          },
          "age25To34": {
            "type": "number",
            "format": "double"
          },
          "age35To44": {
            "type": "number",
            "format": "double"
          },
          "age45To54": {
            "type": "number",
            "format": "double"
          },
          "age55To64": {
            "type": "number",
            "format": "double"
          },
          "age65Plus": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GenderSplit": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "GetAllMatchingPreferenceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchDto"
            },
            "nullable": true
          },
          "minAnchorDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "maxAnchorDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "gameId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "genderSplit": {
            "$ref": "#/components/schemas/GenderSplit"
          },
          "targetAgeMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "targetAgeMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "targetAgeSegments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgeSegment"
            },
            "nullable": true
          },
          "targetCountries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "ipCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ipGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ipCategoryGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "themeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "idealMatches": {
            "type": "string",
            "nullable": true
          },
          "budgetMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "budgetMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "budgetRange": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetRange"
            },
            "nullable": true
          },
          "acceptMinimumGuarantee": {
            "type": "boolean",
            "nullable": true
          },
          "acceptFlatFee": {
            "type": "boolean",
            "nullable": true
          },
          "acceptRevenueShare": {
            "type": "boolean",
            "nullable": true
          },
          "collaborationType": {
            "$ref": "#/components/schemas/CollaborationType"
          },
          "gameSpecificPreference": {
            "type": "boolean",
            "nullable": true
          },
          "demographicsEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "demographicFit": {
            "type": "boolean",
            "nullable": true
          },
          "themesEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "thematicFit": {
            "type": "boolean",
            "nullable": true
          },
          "blockchainOrNFTGames": {
            "type": "boolean",
            "nullable": true
          },
          "gamblingAndIGamingGames": {
            "type": "boolean",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllMatchingPreferenceResponsePagingResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllMatchingPreferenceResponse"
            },
            "nullable": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalRecords": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "GetAllMatchResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/CompanyDto"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/MatchStatus"
          },
          "matchTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchType"
            },
            "nullable": true
          },
          "ipId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ip": {
            "$ref": "#/components/schemas/IPDto"
          },
          "matchingPreferenceIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "matchingPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchingPreferenceDto"
            },
            "nullable": true
          },
          "notMatchReason": {
            "$ref": "#/components/schemas/NotMatchReason"
          },
          "notMatchReasonDetail": {
            "type": "string",
            "nullable": true
          },
          "fitReasonDetail": {
            "type": "string",
            "nullable": true
          },
          "shortlistedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "notInterestedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "anchorDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "matchHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchHistoryDto"
            },
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllMatchResponsePagingResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllMatchResponse"
            },
            "nullable": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalRecords": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "GetAllProposalResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "gameId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "game": {
            "$ref": "#/components/schemas/GameDto"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ProposalStatus"
          },
          "previousStatus": {
            "$ref": "#/components/schemas/ProposalStatus"
          },
          "dealMemoStatus": {
            "$ref": "#/components/schemas/DealMemoStatus"
          },
          "ipId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ip": {
            "$ref": "#/components/schemas/IPDto"
          },
          "matchId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "match": {
            "$ref": "#/components/schemas/MatchDto"
          },
          "collaborationType": {
            "$ref": "#/components/schemas/CollaborationType"
          },
          "declineReasonDetail": {
            "type": "string",
            "nullable": true
          },
          "targetCollaborationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetCollaborationType"
            },
            "nullable": true
          },
          "ipUsageInGame": {
            "type": "string",
            "nullable": true
          },
          "gameArtStyle": {
            "type": "string",
            "nullable": true
          },
          "ipMonetisationDetail": {
            "type": "string",
            "nullable": true
          },
          "commercialStructure": {
            "$ref": "#/components/schemas/CommercialStructure"
          },
          "minimumGuarantee": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "royaltyAdvance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isRoyaltyAdvanceNumeric": {
            "type": "boolean"
          },
          "royaltyAdvanceDetail": {
            "type": "string",
            "nullable": true
          },
          "royaltyRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "royaltyApplyTo": {
            "type": "string",
            "nullable": true
          },
          "flatRateLicenseFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "flatRateAdvance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isFlatRateAdvanceNumeric": {
            "type": "boolean",
            "nullable": true
          },
          "flatRateDetail": {
            "type": "string",
            "nullable": true
          },
          "revenueShareRoyaltyRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "revenueShareRoyaltyApplyTo": {
            "type": "string",
            "nullable": true
          },
          "baseRevenueForecast": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "bestRevenueForecast": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "worstRevenueForecast": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "revenueForecastDetail": {
            "type": "string",
            "nullable": true
          },
          "term": {
            "type": "string",
            "nullable": true
          },
          "productionTime": {
            "type": "string",
            "nullable": true
          },
          "estimatedLaunchDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "territoryRestriction": {
            "$ref": "#/components/schemas/TerritoryRestriction"
          },
          "exclusivity": {
            "$ref": "#/components/schemas/Exclusivity"
          },
          "additionalDeveloperDetail": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "proposalHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProposalHistoryDto"
            },
            "nullable": true
          },
          "statusLastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "previousStatusLastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dealMemoStatusLastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetAllProposalResponsePagingResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetAllProposalResponse"
            },
            "nullable": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalRecords": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "GetGameResponse": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IP": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "status": {
            "$ref": "#/components/schemas/IPStatus"
          },
          "ipCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ipGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ipCategoryGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "description": {
            "maxLength": -1,
            "type": "string",
            "nullable": true
          },
          "themeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "licenseExclusivity": {
            "$ref": "#/components/schemas/LicenseExclusivity"
          },
          "territoryLimitation": {
            "$ref": "#/components/schemas/TerritoryLimitation"
          },
          "contentRestrictions": {
            "$ref": "#/components/schemas/ContentRestrictions"
          },
          "marketingPromotion": {
            "$ref": "#/components/schemas/MarketingPromotion"
          },
          "licensableMaterials": {
            "$ref": "#/components/schemas/LicensableMaterials"
          },
          "licenseObjectives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseObjective"
            },
            "nullable": true
          },
          "ipMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPMedia"
            },
            "nullable": true
          },
          "ipAwards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPAward"
            },
            "nullable": true
          },
          "ipCollaborations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPCollaboration"
            },
            "nullable": true
          },
          "ipAudience": {
            "$ref": "#/components/schemas/IPAudience"
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "airtableIPId": {
            "type": "string",
            "nullable": true
          },
          "instagramHandle": {
            "type": "string",
            "nullable": true
          },
          "twitterHandle": {
            "type": "string",
            "nullable": true
          },
          "tikTokHandle": {
            "type": "string",
            "nullable": true
          },
          "facebookHandle": {
            "type": "string",
            "nullable": true
          },
          "youtubeURL": {
            "type": "string",
            "nullable": true
          },
          "youtubeChannelId": {
            "type": "string",
            "nullable": true
          },
          "yearsActive": {
            "type": "string",
            "nullable": true
          },
          "relationshipType": {
            "$ref": "#/components/schemas/RelationshipType"
          },
          "canShowcase": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPAudience": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ipId": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "topCountries": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "genderBreakdowns": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/GenderBreakdown"
            },
            "nullable": true
          },
          "channelEngagements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelEngagement"
            },
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPAward": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ipId": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "result": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "string",
            "nullable": true
          },
          "awardShow": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPAwardDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ipId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "result": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "string",
            "nullable": true
          },
          "awardShow": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPCategoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPCategoryGenreDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "ipCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "category": {
            "$ref": "#/components/schemas/IPCategoryDto"
          },
          "ipGenreId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "genre": {
            "$ref": "#/components/schemas/IPGenreDto"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPCollaboration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ipId": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "collaborationType": {
            "$ref": "#/components/schemas/CollaborationType"
          },
          "minimumProposalMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimumProposalMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimumProposalRange": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetRange"
            },
            "nullable": true
          },
          "flatFee": {
            "$ref": "#/components/schemas/FlatFee"
          },
          "licenseFee": {
            "$ref": "#/components/schemas/LicenseFee"
          },
          "flatFeeAdvance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "acceptFlatFee": {
            "type": "boolean",
            "nullable": true
          },
          "royalty": {
            "$ref": "#/components/schemas/Royalty"
          },
          "minimumGuarantee": {
            "$ref": "#/components/schemas/MinimumGuarantee"
          },
          "royaltyAdvance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "royaltyRate": {
            "$ref": "#/components/schemas/RoyaltyRate"
          },
          "acceptRoyalty": {
            "type": "boolean",
            "nullable": true
          },
          "revenueShare": {
            "$ref": "#/components/schemas/RevenueShare"
          },
          "revenueShareRate": {
            "$ref": "#/components/schemas/RoyaltyRate"
          },
          "acceptRevenueShare": {
            "type": "boolean",
            "nullable": true
          },
          "airtableIPCollaborationId": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPCollaborationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ipId": {
            "type": "string",
            "format": "uuid"
          },
          "collaborationType": {
            "$ref": "#/components/schemas/CollaborationType"
          },
          "minimumProposalMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimumProposalMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "minimumProposalRange": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetRange"
            },
            "nullable": true
          },
          "flatFee": {
            "$ref": "#/components/schemas/FlatFee"
          },
          "acceptFlatFee": {
            "type": "boolean",
            "nullable": true
          },
          "royalty": {
            "$ref": "#/components/schemas/Royalty"
          },
          "acceptRoyalty": {
            "type": "boolean",
            "nullable": true
          },
          "revenueShare": {
            "$ref": "#/components/schemas/RevenueShare"
          },
          "acceptRevenueShare": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/CompanyDto"
          },
          "status": {
            "$ref": "#/components/schemas/IPStatus"
          },
          "ipCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ipGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ipCategoryGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "themeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "licenseExclusivity": {
            "$ref": "#/components/schemas/LicenseExclusivity"
          },
          "territoryLimitation": {
            "$ref": "#/components/schemas/TerritoryLimitation"
          },
          "contentRestrictions": {
            "$ref": "#/components/schemas/ContentRestrictions"
          },
          "marketingPromotion": {
            "$ref": "#/components/schemas/MarketingPromotion"
          },
          "licensableMaterials": {
            "$ref": "#/components/schemas/LicensableMaterials"
          },
          "licenseObjectives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseObjective"
            },
            "nullable": true
          },
          "ipMedia": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPMediaDto"
            },
            "nullable": true
          },
          "ipAwards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPAwardDto"
            },
            "nullable": true
          },
          "ipCollaborations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPCollaborationDto"
            },
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "banner": {
            "type": "string",
            "nullable": true
          },
          "instagramHandle": {
            "type": "string",
            "nullable": true
          },
          "twitterHandle": {
            "type": "string",
            "nullable": true
          },
          "tikTokHandle": {
            "type": "string",
            "nullable": true
          },
          "facebookHandle": {
            "type": "string",
            "nullable": true
          },
          "youtubeURL": {
            "type": "string",
            "nullable": true
          },
          "youtubeChannelId": {
            "type": "string",
            "nullable": true
          },
          "yearsActive": {
            "type": "string",
            "nullable": true
          },
          "relationshipType": {
            "$ref": "#/components/schemas/RelationshipType"
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "primaryContact": {
            "$ref": "#/components/schemas/UserDto"
          },
          "canShowcase": {
            "type": "boolean",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPDtoPagingResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPDto"
            },
            "nullable": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalRecords": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "IPGenre": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPGenreDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPMedia": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ipId": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AssetMediaType"
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "airtableAttachmentId": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IPMediaDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ipId": {
            "type": "string",
            "format": "uuid"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AssetMediaType"
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          }
        },
        "additionalProperties": false
      },
      "IPStatus": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "LicensableMaterials": {
        "type": "object",
        "properties": {
          "licensorMaterials": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "licensorHoldRights": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LicenseExclusivity": {
        "type": "object",
        "properties": {
          "licensorExclusivities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Exclusivity"
            },
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LicenseFee": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "LicenseObjective": {
        "type": "object",
        "properties": {
          "objectiveType": {
            "$ref": "#/components/schemas/ObjectiveType"
          },
          "otherTitle": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LicensorMaterial": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MarketingCapability": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "MarketingPromotion": {
        "type": "object",
        "properties": {
          "marketingCapabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketingCapability"
            },
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Match": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/MatchStatus"
          },
          "matchTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchType"
            },
            "nullable": true
          },
          "ipId": {
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "matchingPreferenceIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "matchingPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchingPreference"
            },
            "nullable": true
          },
          "notMatchReason": {
            "$ref": "#/components/schemas/NotMatchReason"
          },
          "notMatchReasonDetail": {
            "type": "string",
            "nullable": true
          },
          "fitReasonDetail": {
            "type": "string",
            "nullable": true
          },
          "shortlistedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "notInterestedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "anchorDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "airtableMatchId": {
            "type": "string",
            "nullable": true
          },
          "matchHistories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchHistory"
            },
            "nullable": true
          },
          "isInstantMatch": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "statusLastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/CompanyDto"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/MatchStatus"
          },
          "matchTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchType"
            },
            "nullable": true
          },
          "ipId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ip": {
            "$ref": "#/components/schemas/IPDto"
          },
          "matchingPreferenceIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "matchingPreferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchingPreferenceDto"
            },
            "nullable": true
          },
          "notMatchReason": {
            "$ref": "#/components/schemas/NotMatchReason"
          },
          "notMatchReasonDetail": {
            "type": "string",
            "nullable": true
          },
          "fitReasonDetail": {
            "type": "string",
            "nullable": true
          },
          "shortlistedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "notInterestedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiry": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "anchorDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isInstantMatch": {
            "type": "boolean",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sendNotification": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchDtoPagingResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchDto"
            },
            "nullable": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalRecords": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "MatchHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "matchId": {
            "type": "string",
            "format": "uuid"
          },
          "match": {
            "$ref": "#/components/schemas/Match"
          },
          "currentStatus": {
            "$ref": "#/components/schemas/MatchStatus"
          },
          "currentStatusChangeDate": {
            "type": "string",
            "format": "date-time"
          },
          "currentStatusChangeBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "previousStatus": {
            "$ref": "#/components/schemas/MatchStatus"
          },
          "previousStatusChangeDate": {
            "type": "string",
            "format": "date-time"
          },
          "previousStatusChangeBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchHistoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "matchId": {
            "type": "string",
            "format": "uuid"
          },
          "currentStatus": {
            "$ref": "#/components/schemas/MatchStatus"
          },
          "currentStatusChangeDate": {
            "type": "string",
            "format": "date-time"
          },
          "currentStatusChangeBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "previousStatus": {
            "$ref": "#/components/schemas/MatchStatus"
          },
          "previousStatusChangeDate": {
            "type": "string",
            "format": "date-time"
          },
          "previousStatusChangeBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchingPreference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "maxLength": 250,
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "gameId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "game": {
            "$ref": "#/components/schemas/Game"
          },
          "genderSplit": {
            "$ref": "#/components/schemas/GenderSplit"
          },
          "targetAgeMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "targetAgeMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "targetAgeSegments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgeSegment"
            },
            "nullable": true
          },
          "targetCountries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "ipCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ipGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ipCategoryGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "themeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "idealMatches": {
            "maxLength": -1,
            "type": "string",
            "nullable": true
          },
          "budgetMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "budgetMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "budgetRange": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetRange"
            },
            "nullable": true
          },
          "acceptMinimumGuarantee": {
            "type": "boolean",
            "nullable": true
          },
          "acceptFlatFee": {
            "type": "boolean",
            "nullable": true
          },
          "acceptRevenueShare": {
            "type": "boolean",
            "nullable": true
          },
          "collaborationType": {
            "$ref": "#/components/schemas/CollaborationType"
          },
          "gameSpecificPreference": {
            "type": "boolean",
            "nullable": true
          },
          "demographicsEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "demographicFit": {
            "type": "boolean",
            "nullable": true
          },
          "themesEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "thematicFit": {
            "type": "boolean",
            "nullable": true
          },
          "blockchainOrNFTGames": {
            "type": "boolean",
            "nullable": true
          },
          "gamblingAndIGamingGames": {
            "type": "boolean",
            "nullable": true
          },
          "airtableMatchingPreferenceId": {
            "type": "string",
            "nullable": true
          },
          "isInstantMatch": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchingPreferenceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "companyId": {
            "type": "string",
            "format": "uuid"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyDto"
          },
          "gameId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "game": {
            "$ref": "#/components/schemas/GameDto"
          },
          "genderSplit": {
            "$ref": "#/components/schemas/GenderSplit"
          },
          "targetAgeMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "targetAgeMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "targetAgeSegments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgeSegment"
            },
            "nullable": true
          },
          "targetCountries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "ipCategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ipGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "ipCategoryGenreIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "themeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "idealMatches": {
            "type": "string",
            "nullable": true
          },
          "budgetMin": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "budgetMax": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "budgetRange": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetRange"
            },
            "nullable": true
          },
          "acceptMinimumGuarantee": {
            "type": "boolean",
            "nullable": true
          },
          "acceptFlatFee": {
            "type": "boolean",
            "nullable": true
          },
          "acceptRevenueShare": {
            "type": "boolean",
            "nullable": true
          },
          "collaborationType": {
            "$ref": "#/components/schemas/CollaborationType"
          },
          "gameSpecificPreference": {
            "type": "boolean",
            "nullable": true
          },
          "demographicsEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "demographicFit": {
            "type": "boolean",
            "nullable": true
          },
          "themesEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "thematicFit": {
            "type": "boolean",
            "nullable": true
          },
          "blockchainOrNFTGames": {
            "type": "boolean",
            "nullable": true
          },
          "gamblingAndIGamingGames": {
            "type": "boolean",
            "nullable": true
          },
          "isInstantMatch": {
            "type": "boolean",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchingPreferenceDtoPagingResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchingPreferenceDto"
            },
            "nullable": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalRecords": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "MatchStatus": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "MatchType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "MediaType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "MinimumGuarantee": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "MonetisationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "format": "int32"
      },
      "NotMatchReason": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "ObjectiveType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "OnboardingDto": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/OrganisationType"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            },
            "nullable": true
          },
          "companyName": {
            "type": "string",
            "nullable": true
          },
          "lookingToLicense": {
            "type": "string",
            "nullable": true
          },
          "agreementSignatory": {
            "type": "string",
            "nullable": true
          },
          "agreementDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "authUserId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganisationType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Platform": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "platformType": {
            "$ref": "#/components/schemas/PlatformType"
          },
          "alternativeName": {
            "type": "string",
            "nullable": true
          },
          "platformFamily": {
            "$ref": "#/components/schemas/PlatformFamily"
          },
          "platformLogo": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": -1,
            "type": "string",
            "nullable": true
          },
          "distributionChannelIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlatformFamily": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "PlatFormRelease": {
        "type": "object",
        "properties": {
          "platformId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "releaseDate": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlatformType": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProposalDealMemoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "proposalId": {
            "type": "string",
            "format": "uuid"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/DealMemoStatus"
          },
          "dealMemoUrl": {
            "type": "string",
            "nullable": true
          },
          "ipHolderUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ipHolderUser": {
            "$ref": "#/components/schemas/UserDto"
          },
          "developerUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "developerUser": {
            "$ref": "#/components/schemas/UserDto"
          },
          "generated": {
            "type": "boolean"
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProposalDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "gameId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "game": {
            "$ref": "#/components/schemas/GameDto"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ProposalStatus"
          },
          "previousStatus": {
            "$ref": "#/components/schemas/ProposalStatus"
          },
          "dealMemoStatus": {
            "$ref": "#/components/schemas/DealMemoStatus"
          },
          "ipId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ip": {
            "$ref": "#/components/schemas/IPDto"
          },
          "matchId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "match": {
            "$ref": "#/components/schemas/MatchDto"
          },
          "collaborationType": {
            "$ref": "#/components/schemas/CollaborationType"
          },
          "declineReasonDetail": {
            "type": "string",
            "nullable": true
          },
          "targetCollaborationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetCollaborationType"
            },
            "nullable": true
          },
          "ipUsageInGame": {
            "type": "string",
            "nullable": true
          },
          "gameArtStyle": {
            "type": "string",
            "nullable": true
          },
          "monetisationMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonetisationType"
            },
            "nullable": true
          },
          "ipMonetisationDetail": {
            "type": "string",
            "nullable": true
          },
          "commercialStructure": {
            "$ref": "#/components/schemas/CommercialStructure"
          },
          "minimumGuarantee": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "royaltyAdvance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isRoyaltyAdvanceNumeric": {
            "type": "boolean"
          },
          "royaltyAdvanceDetail": {
            "type": "string",
            "nullable": true
          },
          "royaltyRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "royaltyApplyTo": {
            "type": "string",
            "nullable": true
          },
          "flatRateLicenseFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "flatRateAdvance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isFlatRateAdvanceNumeric": {
            "type": "boolean",
            "nullable": true
          },
          "flatRateDetail": {
            "type": "string",
            "nullable": true
          },
          "revenueShareRoyaltyRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "revenueShareRoyaltyApplyTo": {
            "type": "string",
            "nullable": true
          },
          "baseRevenueForecast": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "bestRevenueForecast": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "worstRevenueForecast": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "revenueForecastDetail": {
            "type": "string",
            "nullable": true
          },
          "term": {
            "type": "string",
            "nullable": true
          },
          "productionTime": {
            "type": "string",
            "nullable": true
          },
          "estimatedLaunchDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "territoryRestriction": {
            "$ref": "#/components/schemas/TerritoryRestriction"
          },
          "exclusivity": {
            "$ref": "#/components/schemas/Exclusivity"
          },
          "additionalDeveloperDetail": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "statusLastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "previousStatusLastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dealMemoStatusLastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProposalDtoPagingResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProposalDto"
            },
            "nullable": true
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalRecords": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ProposalHistoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "proposalId": {
            "type": "string",
            "format": "uuid"
          },
          "currentStatus": {
            "$ref": "#/components/schemas/ProposalStatus"
          },
          "currentStatusChangeDate": {
            "type": "string",
            "format": "date-time"
          },
          "currentStatusChangeBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "previousStatus": {
            "$ref": "#/components/schemas/ProposalStatus"
          },
          "previousStatusChangeDate": {
            "type": "string",
            "format": "date-time"
          },
          "previousStatusChangeBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProposalMediaDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "proposalId": {
            "type": "string",
            "format": "uuid"
          },
          "file": {
            "type": "string",
            "format": "binary",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "fileType": {
            "type": "string",
            "nullable": true
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/AssetMediaType"
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          }
        },
        "additionalProperties": false
      },
      "ProposalSearchOrderType": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "ProposalStatus": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "RatingIntel": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ratingCount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelationshipType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "ReleaseStatus": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "RevenueShare": {
        "type": "object",
        "properties": {
          "royaltyRate": {
            "$ref": "#/components/schemas/RoyaltyRate"
          }
        },
        "additionalProperties": false
      },
      "Royalty": {
        "type": "object",
        "properties": {
          "minimumGuarantee": {
            "$ref": "#/components/schemas/MinimumGuarantee"
          },
          "advance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "royaltyRate": {
            "$ref": "#/components/schemas/RoyaltyRate"
          }
        },
        "additionalProperties": false
      },
      "RoyaltyRate": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "SearchGameResponse": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "publisherName": {
            "type": "string",
            "nullable": true
          },
          "dataSource": {
            "$ref": "#/components/schemas/GameDataSource"
          },
          "dataSourceName": {
            "type": "string",
            "nullable": true
          },
          "platforms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "distance": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SearchOrderType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "SignedAsset": {
        "type": "object",
        "properties": {
          "rawUrl": {
            "type": "string",
            "nullable": true
          },
          "signedUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TargetCollaborationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        "type": "integer",
        "format": "int32"
      },
      "TerritoryLimitation": {
        "type": "object",
        "properties": {
          "territoryRestriction": {
            "$ref": "#/components/schemas/TerritoryRestriction"
          },
          "detail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TerritoryRestriction": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Theme": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "sensorTowerTheme": {
            "type": "string",
            "nullable": true
          },
          "igdbTheme": {
            "type": "string",
            "nullable": true
          },
          "themeCategory": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateProposalRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "gameId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "game": {
            "$ref": "#/components/schemas/GameDto"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/ProposalStatus"
          },
          "previousStatus": {
            "$ref": "#/components/schemas/ProposalStatus"
          },
          "dealMemoStatus": {
            "$ref": "#/components/schemas/DealMemoStatus"
          },
          "ipId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "ip": {
            "$ref": "#/components/schemas/IPDto"
          },
          "matchId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "match": {
            "$ref": "#/components/schemas/MatchDto"
          },
          "collaborationType": {
            "$ref": "#/components/schemas/CollaborationType"
          },
          "declineReasonDetail": {
            "type": "string",
            "nullable": true
          },
          "targetCollaborationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TargetCollaborationType"
            },
            "nullable": true
          },
          "ipUsageInGame": {
            "type": "string",
            "nullable": true
          },
          "gameArtStyle": {
            "type": "string",
            "nullable": true
          },
          "ipMonetisationDetail": {
            "type": "string",
            "nullable": true
          },
          "commercialStructure": {
            "$ref": "#/components/schemas/CommercialStructure"
          },
          "minimumGuarantee": {
            "type": "string",
            "nullable": true
          },
          "royaltyAdvance": {
            "type": "string",
            "nullable": true
          },
          "royaltyAdvanceDetail": {
            "type": "string",
            "nullable": true
          },
          "royaltyRate": {
            "type": "string",
            "nullable": true
          },
          "royaltyApplyTo": {
            "type": "string",
            "nullable": true
          },
          "flatRateLicenseFee": {
            "type": "string",
            "nullable": true
          },
          "flatRateAdvance": {
            "type": "string",
            "nullable": true
          },
          "flatRateDetail": {
            "type": "string",
            "nullable": true
          },
          "revenueShareRoyaltyRate": {
            "type": "string",
            "nullable": true
          },
          "revenueShareRoyaltyApplyTo": {
            "type": "string",
            "nullable": true
          },
          "baseRevenueForecast": {
            "type": "string",
            "nullable": true
          },
          "bestRevenueForecast": {
            "type": "string",
            "nullable": true
          },
          "worstRevenueForecast": {
            "type": "string",
            "nullable": true
          },
          "revenueForecastDetail": {
            "type": "string",
            "nullable": true
          },
          "term": {
            "type": "string",
            "nullable": true
          },
          "productionTime": {
            "type": "string",
            "nullable": true
          },
          "estimatedLaunchDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "territoryRestriction": {
            "$ref": "#/components/schemas/TerritoryRestriction"
          },
          "exclusivity": {
            "$ref": "#/components/schemas/Exclusivity"
          },
          "additionalDeveloperDetail": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "monetisationMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonetisationType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "authId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "statusLastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Company"
            },
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "isPrimaryContact": {
            "type": "boolean",
            "nullable": true
          },
          "layerSlackMemberId": {
            "type": "string",
            "nullable": true
          },
          "isOptedOutNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "isGuestUser": {
            "type": "boolean",
            "nullable": true
          },
          "hubspotContactId": {
            "type": "string",
            "nullable": true
          },
          "airtableUserId": {
            "type": "string",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "isPrimaryContact": {
            "type": "boolean",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserIntel": {
        "type": "object",
        "properties": {
          "activeUsers": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "activeUsersRange": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserStatus": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "UserWithCompanyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "isPrimaryContact": {
            "type": "boolean",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VerificationMethod": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://dev-layerlicensing.us.auth0.com/authorize?audience=https://king.layerlicensing.com",
            "scopes": {
              "openid": "Open Id",
              "profile": "Profile",
              "email": "Email"
            }
          }
        }
      }
    }
  }
}
